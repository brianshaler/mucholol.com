// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this;

  this.Viewporter = (function() {

    function Viewporter(element_id, params) {
      var prop, val, wh, ww, _ref,
        _this = this;
      this.element_id = element_id;
      this.params = params != null ? params : {};
      this.trace = function(str, level) {
        return Viewporter.prototype.trace.apply(_this, arguments);
      };
      this.announceChange = function() {
        return Viewporter.prototype.announceChange.apply(_this, arguments);
      };
      this.setupViewport = function() {
        return Viewporter.prototype.setupViewport.apply(_this, arguments);
      };
      this.resetViewportIfChanged = function() {
        return Viewporter.prototype.resetViewportIfChanged.apply(_this, arguments);
      };
      this.orientationChanged = function(event) {
        return Viewporter.prototype.orientationChanged.apply(_this, arguments);
      };
      this.monitorSize = function(event) {
        return Viewporter.prototype.monitorSize.apply(_this, arguments);
      };
      this.init = function() {
        return Viewporter.prototype.init.apply(_this, arguments);
      };
      window.viewporter = this;
      this.initialized = false;
      this.element = null;
      this.loggingLevel = 0;
      this.isAndroid = navigator.userAgent.match(/Android/i);
      this.isIphone = navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPod/i);
      this.isIpad = navigator.userAgent.match(/iPad/i);
      this.isChrome = navigator.userAgent.match(/Chrome/i) || navigator.userAgent.match(/CriOS/i);
      this.isFirefox = navigator.userAgent.match(/Firefox/i);
      this.isSafariOniOS7 = navigator.userAgent.match(/iPhone.*OS 7_\d.*safari/i);
      this.pixelRatio = 1;
      if (window.devicePixelRatio) {
        this.pixelRatio = window.devicePixelRatio;
      }
      this.previousScreenSize = {
        width: 0,
        height: 0
      };
      this.viewportChanged = false;
      this.viewportWidth = 320;
      this.viewportHeight = 480;
      this.lastViewportWidth = this.viewportWidth;
      this.lastViewportHeight = this.viewportHeight;
      this.lastLandscape = this.isLandscape = true;
      this.lastAnnounce = {
        viewportWidth: -1,
        viewportHeight: -1,
        isLandscape: -1
      };
      this.fullWidthLandscape = true;
      this.fullHeightLandscape = true;
      this.fullWidthPortrait = true;
      this.fullHeightPortrait = true;
      this.interval = 200;
      ww = this.windowWidth();
      wh = this.windowHeight();
      if (ww < wh) {
        this.windowInnerWidth = ww / this.pixelRatio;
        this.windowInnerHeight = wh / this.pixelRatio;
      } else {
        this.windowInnerWidth = wh / this.pixelRatio;
        this.windowInnerHeight = ww / this.pixelRatio;
      }
      this.resolutionsSeen = [];
      window.addEventListener("ondeviceorientation", this.orientationChanged);
      window.addEventListener("deviceorientation", this.orientationChanged);
      window.addEventListener("orientationchange", this.orientationChanged);
      window.addEventListener("visibilitychange", this.orientationChanged);
      window.addEventListener("resize", function(event) {
        _this.trace("resize " + _this.windowHeight(), 2);
        if (_this.isIphone || _this.isAndroid || _this.isIpad) {
          return _this.resetViewportIfChanged();
        } else {
          _this.trace("not iphone or android, so just resize", 2);
          _this.calculateWindowSize();
          return _this.setupViewport();
        }
      });
      if ((this.params != null) && typeof this.params === "object") {
        _ref = this.params;
        for (prop in _ref) {
          val = _ref[prop];
          this[prop] = val;
        }
      }
      window.addEventListener("load", function() {
        _this.trace("ON LOAD! ", 2);
        _this.init();
        _this.lastAnnounce.viewportWidth = -1;
        return _this.announceChange();
      });
      this.hideAddressBar();
      window.addEventListener("load", function() {
        setTimeout(function() {
          return _this.hideAddressBar();
        }, 0);
        return setTimeout(function() {
          return _this.hideAddressBar();
        }, 10);
      });
      this.init();
      this.calculateWindowSize();
      this.setupViewport();
      this.announceChange();
      setTimeout(function() {
        return _this.init();
      }, 1);
    }

    Viewporter.prototype.init = function() {
      var _this = this;
      if ((this.element_id != null) && (document.getElementById(this.element_id) != null)) {
        this.element = document.getElementById(this.element_id);
      }
      this.trace("Initializing?", 2);
      if (!(this.initialized || ((this.element_id != null) && (this.element == null)))) {
        this.trace("INITIALIZING", 2);
        this.hideAddressBar();
        if (this.isIphone) {
          setTimeout(function() {
            return _this.monitorSize();
          }, this.interval);
        }
        setTimeout(function() {
          _this.calculateWindowSize();
          _this.setupViewport();
          return setTimeout(_this.hideAddressBar, 1);
        }, 10);
        this.initialized = true;
        this.calculateWindowSize();
        this.setupViewport();
        return this.announceChange();
      }
    };

    Viewporter.prototype.monitorSize = function(event) {
      var _this = this;
      this.trace("monitorSize", 2);
      this.resetViewportIfChanged();
      return setTimeout(function() {
        return _this.monitorSize();
      }, this.interval);
    };

    Viewporter.prototype.orientationChanged = function(event) {
      var lnd, _ref, _type;
      if (window.orientation != null) {
        lnd = Math.abs(window.orientation) === 90 ? true : false;
        if (lnd === this.isLandscape) {
          return;
        }
      }
      _type = ((event != null ? event.type : void 0) != null) && event.type ? event.type : "";
      this.trace("orientationchange " + _type + ": ", 2);
      if (this.isFirefox) {
        return this.resetViewportIfChanged();
      }
      if (((_ref = this.element) != null ? _ref.style : void 0) != null) {
        this.element.style.display = "block";
      }
      this.calculateWindowSize();
      this.setupViewport();
      return this.announceChange();
    };

    Viewporter.prototype.resetViewportIfChanged = function() {
      var _this = this;
      this.trace("resetViewportIfChanged", 2);
      if (this.isLandscape) {
        this.calculateWindowSize();
        if (this.actualScreenWidth !== this.previousScreenSize.width || this.actualScreenHeight !== this.previousScreenSize.height) {
          this.trace("RESIZE detected.. " + this.previousScreenSize.height + " => " + this.actualScreenHeight, 2);
          this.setupViewport();
          this.previousScreenSize.width = this.actualScreenWidth;
          this.previousScreenSize.height = this.actualScreenHeight;
          return setTimeout(function() {
            return _this.setupViewport();
          }, 300);
        }
      }
    };

    Viewporter.prototype.calculateWindowSize = function() {
      var addressBarHeight, found, i, lowerHeight, navBarHeight, sh, statusBarHeight, sw, upperHeight, upperHeightWithBar, wasLandscape, _i, _ref, _ref1;
      wasLandscape = this.isLandscape;
      this.isLandscape = true;
      if (window.orientation != null) {
        this.isLandscape = Math.abs(window.orientation) === 90 ? true : false;
      } else {
        this.isLandscape = window.innerWidth > window.innerHeight;
      }
      this.actualScreenWidth = this.orientedWidth();
      this.actualScreenHeight = this.orientedHeight();
      sw = this.screenWidth();
      sh = this.screenHeight();
      statusBarHeight = 10;
      navBarHeight = 44;
      addressBarHeight = 60;
      if (this.isIphone && !this.isSafariOniOS7) {
        lowerHeight = this.isChrome ? 256 : 268;
        upperHeight = 320;
        upperHeightWithBar = 260;
        if (this.isLandscape) {
          if (this.actualScreenHeight <= lowerHeight && this.actualScreenHeight !== upperHeightWithBar) {
            this.actualScreenHeight = lowerHeight;
          }
        } else {
          if (this.actualScreenHeight === 444) {
            this.actualScreenHeight += addressBarHeight;
          }
        }
        if (this.actualScreenHeight >= upperHeightWithBar && this.actualScreenHeight !== lowerHeight && this.actualScreenHeight < upperHeight) {
          this.actualScreenHeight = upperHeight;
        }
      }
      if (this.isIphone && this.isSafariOniOS7) {
        if (this.isLandscape) {
          this.actualScreenHeight = 321;
        }
      }
      found = false;
      for (i = _i = 0, _ref = this.resolutionsSeen.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i < this.resolutionsSeen.length) {
          if (((_ref1 = this.resolutionsSeen[i]) != null ? _ref1.width : void 0) === this.actualScreenWidth && this.resolutionsSeen[i].height === this.actualScreenHeight) {
            found = true;
          }
        }
      }
      if (!this.isLandscape) {
        if (this.isIphone) {
          this.actualScreenHeight += 0;
        }
      }
      if (!found) {
        this.resolutionsSeen.push({
          width: this.actualScreenWidth,
          height: this.actualScreenHeight
        });
      }
      if (typeof window.orientation === "undefined" && !this.isIphone && !this.isAndroid) {
        this.actualScreenWidth = this.windowWidth();
        this.actualScreenHeight = this.windowHeight();
      }
      if (this.isFirefox) {
        this.actualScreenWidth = this.windowWidth();
        this.actualScreenHeight = this.windowHeight();
      }
      if (!this.isFirefox) {
        this.actualScreenHeight += 1;
      }
      this.viewportChanged = false;
      if (this.viewportWidth !== this.actualScreenWidth || this.viewportHeight !== this.actualScreenHeight || wasLandscape !== this.isLandscape) {
        this.viewportChanged = true;
      }
      this.viewportWidth = this.actualScreenWidth;
      return this.viewportHeight = this.actualScreenHeight;
    };

    Viewporter.prototype.setupViewport = function() {
      var body, className, classString, classes, h, newClasses, s, setHeight, setWidth, viewport, viewportContent, viewportProperties, w, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
        _this = this;
      if (!this.initialized && this.element) {
        this.init();
      }
      viewport = document.querySelector("meta[name=viewport]");
      this.trace("" + screen.width + "x" + screen.height + " / " + this.viewportWidth + "x" + this.viewportHeight, 2);
      h = this.viewportHeight - Math.random() * .0001;
      w = this.viewportWidth;
      s = 1 - Math.random() * .00001;
      if (this.isAndroid && this.isChrome) {
        h = this.viewportHeight + 0;
        w = this.viewportWidth + 0;
      }
      viewportProperties = [];
      viewportProperties.push("initial-scale=" + s);
      viewportProperties.push("minimum-scale=" + s);
      viewportProperties.push("maximum-scale=" + s);
      viewportProperties.push("user-scalable=no");
      body = document.getElementsByTagName("body");
      setWidth = (this.isLandscape && this.fullWidthLandscape) || (!this.isLandscape && this.fullWidthPortrait);
      setHeight = (this.isLandscape && this.fullHeightLandscape) || (!this.isLandscape && this.fullHeightPortrait);
      if (setWidth) {
        viewportProperties.push("width=" + w);
        if (((_ref = this.element) != null ? _ref.style : void 0) != null) {
          this.element.style.width = this.viewportWidth + "px";
          this.element.style["overflow-x"] = "hidden";
        }
        if ((body != null ? (_ref1 = body[0]) != null ? _ref1.style : void 0 : void 0) != null) {
          body[0].style.width = this.viewportWidth + "px";
        }
      } else {
        if (((_ref2 = this.element) != null ? _ref2.style : void 0) != null) {
          this.element.style.width = "";
          this.element.style["overflow-x"] = "auto";
        }
        if ((body != null ? (_ref3 = body[0]) != null ? _ref3.style : void 0 : void 0) != null) {
          body[0].style.width = "";
        }
      }
      if (setHeight) {
        viewportProperties.push("height=" + h);
        if (((_ref4 = this.element) != null ? _ref4.style : void 0) != null) {
          this.element.style.height = this.viewportHeight + "px";
          this.element.style["overflow-y"] = "hidden";
        }
        if ((body != null ? (_ref5 = body[0]) != null ? _ref5.style : void 0 : void 0) != null) {
          body[0].style.height = this.viewportHeight + "px";
        }
      } else {
        if (((_ref6 = this.element) != null ? _ref6.style : void 0) != null) {
          this.element.style.height = "";
          this.element.style["overflow-y"] = "auto";
        }
        if ((body != null ? (_ref7 = body[0]) != null ? _ref7.style : void 0 : void 0) != null) {
          body[0].style.height = "inherit";
        }
      }
      viewportContent = viewportProperties.join(", ");
      if (((_ref8 = this.element) != null ? _ref8.style : void 0) != null) {
        setTimeout(function() {
          return _this.element.style.display = "block";
        }, 100);
      }
      if ((body != null ? body.getAttribute : void 0) != null) {
        classString = body.getAttribute("class") || "";
        classes = classString.split(" ");
        newClasses = [];
        for (_i = 0, _len = classes.length; _i < _len; _i++) {
          className = classes[_i];
          if (className !== "portrait-mode" && className !== "landscape-mode") {
            newClasses.push(className);
          }
        }
        if (this.isLandscape) {
          newClasses.push("landscape-mode");
        } else {
          newClasses.push("portrait-mode");
        }
        body.setAttribute("class", newClasses.join(" "));
      }
      /*
      if !@isAndroid or !@isChrome
        if !@isIphone
          viewport.setAttribute "content", "width = device-width, height = device-height, initial-scale = 1, minimum-scale = 1, maximum-scale = 1, user-scalable = no"
      */

      setTimeout(function() {
        if (_this.isFirefox) {
          return viewport.setAttribute("content", viewportContent);
        } else {
          return viewport.setAttribute("content", viewportContent);
        }
      }, 10);
      if (this.viewportChanged && this.lastViewportWidth === this.viewportWidth && this.lastViewportHeight === this.viewportHeight && this.lastLandscape === this.isLandscape) {
        this.viewportChanged = false;
      }
      if (this.viewportChanged) {
        setTimeout(this.hideAddressBar, 1);
        return this.announceChange();
      }
    };

    Viewporter.prototype.announceChange = function() {
      var event;
      this.trace("announceChange: " + window.innerWidth, 2);
      if (this.lastAnnounce.viewportWidth === this.viewportWidth && this.lastAnnounce.viewportHeight === this.viewportHeight && this.lastAnnounce.isLandscape === this.isLandscape) {
        return this.trace("NO REPEAT", 2);
      } else {
        this.trace("now: " + this.viewportWidth + "x" + this.viewportHeight + " / " + this.isLandscape, 2);
        event = document.createEvent("Event");
        event.initEvent("viewportchanged", true, true);
        event.width = this.viewportWidth;
        event.height = this.viewportHeight;
        event.isLandscape = this.isLandscape;
        this.lastViewportWidth = this.viewportWidth;
        this.lastViewportHeight = this.viewportHeight;
        this.lastLandscape = this.isLandscape;
        window.dispatchEvent(event);
        return this.lastAnnounce = {
          viewportWidth: this.viewportWidth,
          viewportHeight: this.viewportHeight,
          isLandscape: this.isLandscape
        };
      }
    };

    Viewporter.prototype.option = function(key, val) {
      var sizeRestrictions;
      sizeRestrictions = ["fullWidthLandscape", "fullHeightLandscape", "fullWidthPortrait", "fullHeightPortrait"];
      if (sizeRestrictions.indexOf(key > -1)) {
        this[key] = val === true ? true : false;
      }
      this.lastViewportWidth = 0;
      this.lastViewportHeight = 0;
      this.viewportChanged = true;
      return this.setupViewport();
    };

    Viewporter.prototype.screenRatio = function() {
      var ratio, sh, sw, wh, ww;
      ratio = 1;
      if (this.pixelRatio > 1) {
        sw = screen.width;
        sh = screen.height;
        ww = this.windowWidth();
        wh = this.windowHeight();
        if (ww * this.pixelRatio === sw || wh * this.pixelRatio === sw || ww * this.pixelRatio === sh || wh * this.pixelRatio === sh) {
          ratio = this.pixelRatio;
        }
      }
      return ratio;
    };

    Viewporter.prototype.orientedWidth = function() {
      var w;
      w = this.isLandscape ? this.screenHeight() : this.screenWidth();
      return Math.round(w);
    };

    Viewporter.prototype.orientedHeight = function() {
      var h, windowRatio;
      if (this.isIphone || this.isChrome || this.isIpad) {
        windowRatio = this.windowWidth() > this.windowHeight() ? this.windowWidth() / this.windowHeight() : this.windowHeight() / this.windowWidth();
        h = this.orientedWidth() * (this.isLandscape ? 1 / windowRatio : windowRatio);
      } else {
        h = this.isLandscape ? this.screenWidth() : this.screenHeight();
      }
      return Math.round(h);
    };

    Viewporter.prototype.screenWidth = function() {
      var sw;
      sw = screen.width < screen.height ? screen.width : screen.height;
      return sw / this.screenRatio();
    };

    Viewporter.prototype.screenHeight = function() {
      var sh;
      sh = screen.width < screen.height ? screen.height : screen.width;
      return sh / this.screenRatio();
    };

    Viewporter.prototype.windowWidth = function() {
      var s;
      s = 1;
      if (this.isFirefox && document.documentElement) {
        s = window.innerWidth / document.documentElement.clientWidth;
      }
      return window.innerWidth / s;
    };

    Viewporter.prototype.windowHeight = function() {
      var s;
      s = 1;
      if (this.isFirefox && document.documentElement) {
        s = window.innerWidth / document.documentElement.clientWidth;
      }
      return window.innerHeight / s;
    };

    Viewporter.prototype.hideAddressBar = function() {
      window.scrollTo(0, 0);
      return setTimeout(function() {
        return window.scrollTo(0, 1);
      }, 100);
    };

    Viewporter.prototype.trace = function(str, level) {
      var log, _results;
      if (!this.backlog) {
        this.backlog = [];
      }
      log = document.getElementById("log");
      if (this.loggingLevel > 0) {
        if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
          console.log(str);
        }
        if (level <= this.loggingLevel) {
          if (log != null) {
            log.innerHTML = str + "<br />\n" + log.innerHTML;
            if (log.innerHTML.length > 2000) {
              log.innerHTML = log.innerHTML.substring(0, 2000);
            }
          }
        }
      }
      if ((log != null ? log.innerHTML : void 0) != null) {
        _results = [];
        while (this.backlog.length > 0) {
          _results.push(this.trace(this.backlog.shift(), level));
        }
        return _results;
      } else {
        return this.backlog.push(str);
      }
    };

    return Viewporter;

  })();

}).call(this);
